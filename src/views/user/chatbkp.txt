import React, { useState, useRef, useEffect } from "react";
import { IoMdClose } from "react-icons/io";
import { FaList } from "react-icons/fa6";
import { useDispatch, useSelector } from "react-redux";
import { Link, useParams } from "react-router-dom";

import { AiOutlineMessage, AiOutlinePlus } from "react-icons/ai";
import { GrEmoji } from "react-icons/gr";
import { IoSend } from "react-icons/io5";

import {
  get_my_friends,
  add_friend,
  send_message,
  updateMessage,
  messageClear,
} from "../../store/Reducers/chatReducer";
import { socket } from "../../utils/utils";
import toast from "react-hot-toast";

const SellerToCustomer = () => {
  const scrollRef = useRef();
  const [show, setShow] = useState(false);
  const { userInfo } = useSelector((state) => state.auth);
  const { all_messages, currentFd, my_friends, successMessage } = useSelector(
    (state) => state.chat
  );

  const dispatch = useDispatch();
  const [text, setText] = useState("");

  const { friendId } = useParams();
  const [receverMessage, setReceverMessage] = useState("");
  const [activeUsers, setActiveUsers] = useState([]);

  //🐱‍🏍======= myself Register pre process to start a chat START =======
  // 1)Register my self to chat assemble and getmy all friends
  useEffect(() => {
    socket.emit("add_user", userInfo._id, userInfo);

    if (userInfo._id) {
      dispatch(get_my_friends(userInfo._id));
    }
  }, [userInfo._id, userInfo, dispatch]);
  //🐱‍🏍======= myself Register pre process to start a chat END =======

  //🎊======= message resive process START =======
  // 2.1) listen active friends &  Waiting for friends message
  useEffect(() => {
    socket.on("resive_user_message", (msg) => {
      setReceverMessage(msg);
    });
    socket.on("activeUsers", (users) => {
      dispatch(get_my_friends(userInfo._id));
      setActiveUsers(users);
    });
  }, []);

  // 2.2) if got my friend msg in socket via
  useEffect(() => {
    if (receverMessage) {
      if (
        friendId === receverMessage.senderId &&
        userInfo._id === receverMessage.receverId
      ) {
        dispatch(updateMessage(receverMessage));
      } else {
        toast.success(`${receverMessage.senderName} sent a message`);
        dispatch(messageClear());
      }
    }
  }, [receverMessage, friendId, userInfo._id, dispatch]);

  // 2.3) if i got any message ready scroll to view
  useEffect(() => {
    scrollRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [all_messages]);
  //🎊======= message resive process END =======

  //🐱‍💻======= Add New Friend START =======
  // 3) if i know any new name?, add that person to my friendslist
  useEffect(() => {
    if (friendId) {
      dispatch(add_friend({ friendId, userId: userInfo._id }));
    }
    // console.log(friendId);
  }, [dispatch, friendId, userInfo._id]);
  //🐱‍💻======= Add New Friend END =======

  //🚀======= send ing process start =======
  // 4.1) send my msg to my DB & my Friend DB
  const send = (e) => {
    e.preventDefault();
    if (text) {
      dispatch(
        send_message({
          userId: userInfo._id,
          name: userInfo.name,
          friendId: friendId,
          text: text,
        })
      );
      setText("");
    }
  };

  // 4.2) send that my msg to socket vie (my friend immediately get my single msg in event via)
  useEffect(() => {
    if (successMessage) {
      socket.emit("send_message", all_messages[all_messages.length - 1]);
      dispatch(messageClear());
    }
  }, [successMessage, all_messages, dispatch]);
  //🚀======= send ing process end ========================

  return (
    <div className="px-2 lg:px-7 py-5">
      <div className="w-full bg-[#6a5fdf] px-4 py-4 rounded-md h-[calc(100vh-140px)]">
        <div className="flex w-full h-full relative">
          <div
            className={`w-[280px] h-full absolute z-10 ${
              show ? "-left-[16px]" : "-left-[336px]"
            } md:left-0 md:relative transition-all `}
          >
            <div className="w-full h-[calc(100vh-177px)] bg-[#9e97e9] md:bg-transparent overflow-y-auto">
              <div className="flex text-xl justify-between items-center p-4 md:p-0 md:px-3 md:pb-3 text-white">
                <h2>Customer</h2>
                <span
                  onClick={() => setShow(!show)}
                  className="block cursor-pointer md:hidden"
                >
                  <IoMdClose />{" "}
                </span>
              </div>

              {my_friends.map((c, i) => (
                <Link
                  key={i}
                  to={`/user/dashboard/chat-friends/${c.fdId}`}
                  className={`h-[60px] flex justify-start gap-2 items-center text-white px-2 py-2 rounded-md cursor-pointer ${
                    c.fdId === friendId ? "bg-[#8288ed]" : ""
                  } `}
                >
                  <div className="relative">
                    <img
                      className="w-[38px] h-[38px] border-white border-2 max-w-[38px] p-[2px] rounded-full"
                      src={c.image}
                      alt="friend-img"
                    />
                    <div className="w-[10px] h-[10px] bg-green-500 rounded-full absolute right-0 bottom-0"></div>
                  </div>

                  <div className="flex justify-center items-start flex-col w-full">
                    <div className="flex justify-between items-center w-full">
                      <h2 className="text-base font-semibold">{c.name}</h2>
                    </div>
                  </div>
                </Link>
              ))}
            </div>
          </div>

          {/* chat area start  */}
          <div className="w-full md:w-[calc(100%-200px)] md:pl-4">
            {friendId ? (
              <div>
                {/*1) used to find a current friend pic,name,active icon, sidebar open/close icon - start*/}
                <div className="flex justify-between items-center">
                  {/*1.1 current user img,name,live icon - start*/}
                  <div className="flex justify-start items-center gap-3">
                    <div className="relative">
                      <img
                        className="w-[45px] h-[45px] border-green-500 border-2 max-w-[45px] p-[2px] rounded-full"
                        src={currentFd.image}
                        alt=""
                      />

                      {activeUsers.some(
                        (c) => c.userId === currentFd.fdId
                      ) && (
                        <div className="w-[10px] h-[10px] bg-green-500 rounded-full absolute right-0 bottom-0"></div>
                      )}
                    </div>

                    <h2 className="text-base text-white font-semibold">
                      {currentFd.name}
                    </h2>
                  </div>
                  {/*1.1 current user img,name,live icon - end*/}

                  {/*1.2 user sidebar btn - start*/}
                  <div
                    onClick={() => setShow(!show)}
                    className="w-[35px] flex sm:hidden md:hidden lg:hidden h-[35px] rounded-sm bg-blue-500 shadow-lg hover:shadow-blue-500/50 justify-center cursor-pointer items-center text-white"
                  >
                    <span>
                      <FaList />{" "}
                    </span>
                  </div>
                  {/*1.2 user sidebar btn - end*/}
                </div>
                {/*1) used to find a current friend pic,name,active icon, sidebar open/close icon - end*/}

                {/*2) current friend msg start */}
                <div className="py-4">
                  <div className="bg-[#475569] h-[calc(100vh-290px)] rounded-md p-3 overflow-y-auto">
                    {all_messages &&
                      all_messages.map((m, i) => (
                        <div
                          key={i}
                          ref={scrollRef}
                          className={`w-full flex justify-start items-center ${
                            currentFd.fdId !== m.receverId
                              ? "justify-start"
                              : "justify-end"
                          }`}
                        >
                          <div className="flex justify-start items-start gap-2 md:px-3 py-2 max-w-full lg:max-w-[85%]">
                            
                            <div>
                            <img className="w-[38px] h-[38px] border-2 border-white rounded-full max-w-[38px] p-[3px]"
                                src={currentFd.fdId !== m.receverId ? currentFd.image : userInfo.image}
                                alt="profile-image"
                              />
                            </div>

                            <div className={`flex justify-center items-start flex-col w-full${currentFd.fdId !== m.receverId
                                    ? " bg-blue-500 shadow-lg shadow-blue-500/50"
                                    : " bg-purple-500 shadow-lg shadow-purple-500/50"} text-white py-1 px-2 rounded-md`}>
                              <span>{m.message} </span>
                            </div>
                            
                          </div>
                        </div>
                      ))}
                  </div>
                </div>
                {/*2) current friend msg end */}

                {/*3) msg send form start */}
                <form onSubmit={send} className="flex gap-3">
                  <input
                    value={text}
                    onChange={(e) => setText(e.target.value)}
                    className="w-full flex justify-between px-2 border border-slate-700 items-center py-[5px] focus:border-blue-500 rounded-md outline-none bg-transparent text-[#d0d2d6]"
                    type="text"
                    placeholder="Input Your Message"
                  />
                  <button className="shadow-lg bg-[#06b6d4] hover:shadow-cyan-500/50 text-semibold w-[75px] h-[35px] rounded-md text-white flex justify-center items-center">
                    Send
                  </button>
                </form>
                {/*3) msg send form end */}
              </div>
            ) : (
              // if not find current frined show select friend stat
              <div className="py-4">
                <div
                  onClick={() => setShow(!show)}
                  className="bg-[#475569] h-[calc(100vh-200px)] rounded-md p-3 overflow-y-auto"
                >
                  <div className="w-full h-full flex justify-center items-center text-white gap-2 flex-col">
                    <span>Select Friend </span>
                  </div>
                </div>
              </div>
              // if not find current frined show select friend end
            )}
          </div>
          {/* chat area end  */}
        </div>
      </div>
    </div>
  );
};

export default SellerToCustomer;
